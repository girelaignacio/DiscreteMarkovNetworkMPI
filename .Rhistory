adjancency_matrix <- read.table(file.path("./results",i,results[1]))
View(adjancency_matrix)
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(adjancency_matrix) <- colnames(adjancency_matrix) <- indicators
"_raw_" %in% results[1]
grepl("_raw_", results[1])
grepl("_mpi_poor_", results[1])
attr("censores", X) <- if(grepl("_mpi_poor_", results[1])){TRUE}else{FALSE}
grepl("_mpi_poor_", results[1])
attr("censored", X) <- if(grepl("_mpi_poor_", results[1])){TRUE}else{FALSE}
attr(X, "censored") <- if(grepl("_mpi_poor_", results[1])){TRUE}else{FALSE}
# read adjancecy matrix
X <- read.table(file.path("./results",i,results[1]))
attr(X, "censored") <- if(grepl("_mpi_poor_", results[1])){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", results[1])){FALSE}else{TRUE}
substr(results[1], length(results[1])-5)
substr(results[1], length(results[1])-5, length(results[1]))
results[1]
stringr::str_extract(file_name, "(?<=_c)(.*?)(?=\\.txt)")
stringr::str_extract(results[1], "(?<=_c)(.*?)(?=\\.txt)")
stringr::str_extract(results[1], "(?<=e_c)(.*?)(?=\\.txt)")
attr(X,"c") <- as.numeric(stringr::str_extract(results[1], "(?<=e_c)(.*?)(?=\\.txt)"))
str(X)
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
str(X)
class(X) <- "DMNgraph" # Discrete Markov Network graph
X
# read adjancecy matrix
X <- read.table(file.path("./results",i,results[1]))
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
attr(X, "censored") <- if(grepl("_mpi_poor_", results[1])){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", results[1])){FALSE}else{TRUE}
attr(X,"c") <- as.numeric(stringr::str_extract(results[1], "(?<=e_c)(.*?)(?=\\.txt)"))
attr(X, "class") <- "DMNgraph" # Discrete Markov Network graph
View(X)
# read adjancecy matrix
X <- read.table(file.path("./results",i,results[1]))
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
attr(X, "censored") <- if(grepl("_mpi_poor_", results[1])){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", results[1])){FALSE}else{TRUE}
attr(X,"c") <- as.numeric(stringr::str_extract(results[1], "(?<=e_c)(.*?)(?=\\.txt)"))
attr(X, "data") <- "DMN" # Discrete Markov Network graph
X
str(x)
str(X)
substr(i, 1,3)
i
results <- lapply(list.files("./results"),
function(x){
country_iso <- substr(i, 1,3)
file_names <- list.files(file.path("./results",x))
adj_matrices <- lapply(file_names,
function(y){
X <- read.table(file.path("./results",x,y))
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
attr(X, "censored") <- if(grepl("_mpi_poor_", results[1])){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", results[1])){FALSE}else{TRUE}
attr(X,"c") <- as.numeric(stringr::str_extract(results[1], "(?<=e_c)(.*?)(?=\\.txt)"))
attr(X, "data") <- "DMN" # Discrete Markov Network graph
return(X)
})
attr(adj_matrices,"country") <- x
return(adj_matrices)
})
View(results)
results[[1]][[1]]
str(results[[1]][[1]])
str(results[[1]])
results <- lapply(list.files("./results"),
function(x){
country_iso <- substr(i, 1,3)
file_names <- list.files(file.path("./results",x))
adj_matrices <- lapply(file_names,
function(y){
X <- read.table(file.path("./results",x,y))
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
attr(X, "censored") <- if(grepl("_mpi_poor_", results[1])){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", results[1])){FALSE}else{TRUE}
attr(X,"c") <- as.numeric(stringr::str_extract(results[1], "(?<=e_c)(.*?)(?=\\.txt)"))
attr(X, "data") <- "DMN" # Discrete Markov Network graph
return(X)
})
attr(adj_matrices,"country") <- x
return(adj_matrices)
})
warnings()
country_list <- lapply(list.files("./results"),
function(x){
country_iso <- substr(i, 1,3)
file_names <- list.files(file.path("./results",x))
adj_matrices <- lapply(file_names,
function(y){
X <- read.table(file.path("./results",x,y))
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
attr(X, "censored") <- if(grepl("_mpi_poor_", results[1])){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", results[1])){FALSE}else{TRUE}
attr(X,"c") <- as.numeric(stringr::str_extract(results[1], "(?<=e_c)(.*?)(?=\\.txt)"))
attr(X, "data") <- "DMN" # Discrete Markov Network graph
return(X)
})
attr(adj_matrices,"country") <- x
return(adj_matrices)
})
country_list <- lapply(list.files("./results"),
function(x){
country_iso <- substr(x, 1,3)
file_names <- list.files(file.path("./results",x))
adj_matrices <- lapply(file_names,
function(y){
X <- read.table(file.path("./results",x,y))
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
attr(X, "censored") <- if(grepl("_mpi_poor_", results[1])){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", results[1])){FALSE}else{TRUE}
attr(X,"c") <- as.numeric(stringr::str_extract(results[1], "(?<=e_c)(.*?)(?=\\.txt)"))
attr(X, "data") <- "DMN" # Discrete Markov Network graph
return(X)
})
attr(adj_matrices,"country") <- x
return(adj_matrices)
})
country_list <- lapply(list.files("./results"),
function(x){
country_iso <- substr(x, 1,3)
file_names <- list.files(file.path("./results",x))
adj_matrices <- lapply(file_names,
function(y){
X <- read.table(file.path("./results",x,y))
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
attr(X, "censored") <- if(grepl("_mpi_poor_", y)){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", y)){FALSE}else{TRUE}
attr(X,"c") <- as.numeric(stringr::str_extract(y, "(?<=e_c)(.*?)(?=\\.txt)"))
attr(X, "data") <- "DMN" # Discrete Markov Network graph
return(X)
})
attr(adj_matrices,"country") <- x
return(adj_matrices)
})
View(country_list)
str(country_list)
country_list <- lapply(list.files("./results"),
function(x){
country_iso <- substr(x, 1,3)
file_names <- list.files(file.path("./results",x))
adj_matrices <- lapply(file_names,
function(y){
X <- read.table(file.path("./results",x,y))
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
attr(X,"file name") <- y
attr(X, "censored") <- if(grepl("_mpi_poor_", y)){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", y)){FALSE}else{TRUE}
attr(X,"c") <- as.numeric(stringr::str_extract(y, "(?<=e_c)(.*?)(?=\\.txt)"))
attr(X, "data") <- "DMN" # Discrete Markov Network graph
return(X)
})
attr(adj_matrices,"country") <- x
return(adj_matrices)
})
View(country_list)
str(country_list)
which(attr(country_list,"country") == "arg")
attr(country_list,"country")
attributes(country_list)
sapply(country_list, attr(country_list,"country"))
sapply(country_list, attr(country_list,"country") == "arg")
sapply(country_list, function(x) attr(x,"country") == "arg")
sapply(country_list, function(x) attr(x,"country"))
country_list <- lapply(list.files("./results"),
function(x){
country_iso <- substr(x, 1,3)
file_names <- list.files(file.path("./results",x))
adj_matrices <- lapply(file_names,
function(y){
X <- read.table(file.path("./results",x,y))
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
attr(X,"file name") <- y
attr(X, "censored") <- if(grepl("_mpi_poor_", y)){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", y)){FALSE}else{TRUE}
attr(X,"c") <- as.numeric(stringr::str_extract(y, "(?<=e_c)(.*?)(?=\\.txt)"))
attr(X, "data") <- "DMN" # Discrete Markov Network graph
return(X)
})
attr(adj_matrices,"country") <- country_iso
return(adj_matrices)
})
sapply(country_list, function(x) attr(x,"country"))
which(sapply(country_list, function(x) attr(x,"country")) == "arg")
x <- country_list[[1]]
which(attr(x,"c") == 0)
sapply(attr(x,"c"))
sapply(x, attr(x,"c"))
x <- country_list[[1]]
sapply(x, function(y) attr(y,"c"))
sapply(x, function(y) which(attr(y,"c") == 0 & attr(y,"censored") == TRUE))
sapply(x, function(y) which(attr(y,"c") == 0)
)
sapply(x, function(y) if(attr(y,"c") == 0){TRUE})
sapply(x, function(y) if(attr(y,"c") == 0){TRUE},simplify = T)
sapply(x, function(y) if(attr(y,"c") == 0){TRUE}) == TRUE
isTRUE(sapply(x, function(y) if(attr(y,"c") == 0){TRUE}))
which((sapply(x, function(y) if(attr(y,"c") == 0){TRUE}) == TRUE)
)
which(sapply(x, function(y) if(attr(y,"c") == 0){TRUE}else{FALSE}) == TRUE)
# Get the desired adjacency matrices
c = 0
condition <- expression("attr(y,"c") == `c`")
condition <- expression("attr(y,'c'') == `c`")
which(sapply(x, function(y) if(condition){TRUE}else{FALSE}) == TRUE)
expression("attr(y,'c'') == `c`")
condition <- expression("attr(y,'c') == `c`")
which(sapply(x, function(y) if(condition){TRUE}else{FALSE}) == TRUE)
expression("attr(y,'c') == `c`")
eval(expression("attr(y,'c') == `c`"))
which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
eval(bquote(attr(y,'c') == .(c)))
condition <- bquote(attr(y,'c') == .(c))
which(sapply(x, function(y) if(eval(bquote(attr(y,'c') == .(c)))){TRUE}else{FALSE}) == TRUE)
# Get the desired adjacency matrices
c = 0
censored = TRUE
conservative = TRUE
condition <- bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .c(conservative))
which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
which(sapply(x, function(y) if(eval(bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .c(conservative)))){TRUE}else{FALSE}) == TRUE)
# Get the desired adjacency matrices
c = 0
censored = TRUE
conservative = TRUE
condition <- bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .c(conservative))
which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
condition <- bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .(conservative))
which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
sapply(country_list, function(x){
condition <- bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .(conservative))
idx <- which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
return(x[[idx]])
})
sapply(country_list, function(x){
condition <- bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .(conservative))
idx <- which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
return(x[idx])
})
str(sapply(country_list, function(x){
condition <- bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .(conservative))
idx <- which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
return(x[idx])
}))
length(sapply(country_list, function(x){
condition <- bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .(conservative))
idx <- which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
return(x[idx])
}))
# Get the desired adjacency matrices
filter_matrices <- function(c = 0,
censored = TRUE,
conservative = TRUE){
adjacency_matrices <- sapply(country_list, function(x){
condition <- bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .(conservative))
idx <- which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
return(x[idx])
}
return(adjacency_matrices)
})
# Get the desired adjacency matrices
filter_matrices <- function(c = 0,
censored = TRUE,
conservative = TRUE){
adjacency_matrices <- sapply(country_list, function(x){
condition <- bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .(conservative))
idx <- which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
return(x[idx])
})
return(adjacency_matrices)
}
filter_matrices()
runApp('graphs_plots')
X <- filter_matrices()
Reduce(sum, X)
Reduce("+", X)
Reduce("+", X)/46
X <- Reduce("+", X)/46
length(X)
X <- Reduce("+", X)/46
reshape::melt(X)
X
X <- filter_matrices()
X <- Reduce("+", X)/46
X <- filter_matrices()
y <- Reduce("+", X)/46
reshape::melt(y)
View(y)
y <- as.matrix(Reduce("+", X)/46)
reshape::melt(y)
ggplot(reshape::melt(y), aes(x = X1, y = X2, fill = value)) +
geom_tile()
library(ggplot2)
ggplot(reshape::melt(y), aes(x = X1, y = X2, fill = value)) +
geom_tile()
ggplot(reshape::melt(y), aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = value), color = "white", size = 4) +
coord_fixed()
ggplot(reshape::melt(y), aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
View(y)
melted_data <- reshape::melt(y)
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
View(melted_data)
y <- as.matrix(Reduce("+", X)/46)
order <- order(y[1, ])
y_reordered <- y[order, order]
melted_data <- reshape::melt(y_reordered)
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
View(y_reordered)
order
y <- as.matrix(Reduce("+", X)/46)
10:1
y_reordered <- y[order, 10:1]
library(ggplot2)
melted_data <- reshape::melt(y_reordered)
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
X <- filter_matrices()
y <- as.matrix(Reduce("+", X)/46)
y_reordered <- y[order, 10:1]
library(ggplot2)
melted_data <- reshape::melt(y_reordered)
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
y <- as.matrix(Reduce("+", X)/46)
y_reordered <- y[1:10, 10:1]
library(ggplot2)
melted_data <- reshape::melt(y_reordered)
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
View(y_reordered)
y <- as.matrix(Reduce("+", X)/46)
y_reordered <- y[10:1, 1:10]
library(ggplot2)
melted_data <- reshape::melt(y_reordered)
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
ggplot(melted_data, aes(x = X1, y = -X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
y <- as.matrix(Reduce("+", X)/46)
library(ggplot2)
melted_data <- reshape::melt(y)
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
X <- filter_matrices()
y <- as.matrix(Reduce("+", X)/46)
library(ggplot2)
melted_data <- reshape::melt(y)
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
View(y)
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
View(melted_data)
y
X <- filter_matrices()
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
y <- as.matrix(Reduce("+", X)/46)
y
library(ggplot2)
melted_data <- reshape::melt(y)
melted_data
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
View(melted_data)
y <- Reduce("+", X)/46
library(ggplot2)
melted_data <- reshape::melt(y)
melted_data
country_list <- lapply(list.files("./results"),
function(x){
country_iso <- substr(x, 1,3)
file_names <- list.files(file.path("./results",x))
adj_matrices <- lapply(file_names,
function(y){
X <- read.table(file.path("./results",x,y))
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
rownames(X) <- colnames(X) <- indicators
attr(X,"file name") <- y
attr(X, "censored") <- if(grepl("_mpi_poor_", y)){TRUE}else{FALSE}
attr(X, "conservative") <- if(grepl("_nconservative_", y)){FALSE}else{TRUE}
attr(X,"c") <- as.numeric(stringr::str_extract(y, "(?<=e_c)(.*?)(?=\\.txt)"))
attr(X, "data") <- "DMN" # Discrete Markov Network graph
return(X)
})
attr(adj_matrices,"country") <- country_iso
return(adj_matrices)
})
# Get the desired adjacency matrices
filter_matrices <- function(c = 0,
censored = TRUE,
conservative = TRUE){
adjacency_matrices <- sapply(country_list, function(x){
condition <- bquote(attr(y,'c') == .(c) &
attr(y,'censored') == .(censored) &
attr(y,"conservative") == .(conservative))
idx <- which(sapply(x, function(y) if(eval(condition)){TRUE}else{FALSE}) == TRUE)
return(x[idx])
})
return(adjacency_matrices)
}
X <- filter_matrices()
indicators <- c('d_cm', 'd_nutr',
'd_satt', 'd_educ',
'd_elct', 'd_wtr', 'd_sani','d_hsg', 'd_ckfl', 'd_asst')
y <- as.matrix(Reduce("+", X)/46)
library(ggplot2)
melted_data <- reshape::melt(y)
melted_data
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
View(melted_data)
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
melted_data
ggplot(melted_data, aes(x = X1, y = X2, fill = value)) +
geom_tile(color = "black") +
geom_text(aes(label = round(value,2)), color = "white", size = 4) +
coord_fixed()
